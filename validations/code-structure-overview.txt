The code has the following layers:
a) The main application
b) package com.learn.valpack.controller for the REST Controllers
c) package com.learn.valpack.controller.form for Object used for API support.
d) For each API message in the controller, there will only be one method in the Service calls

The best wayt to design domain objects and services classes to imagine and alternate Controllers like say GraphQL controller and assume the controller layer can change.

d) package com.learn.valpack.domain for the Domain or Business Objects
e) A mapper class in package com.learn.valpack.controller maps the form object to domain objects and vice-versa
f) package com.learn.valpack.service for exposing services that will be called from the Controllers.
g) package com.learn.valpack.bo for business objects that will be called from the service Classes
h) The methods in a service are marked by @Transactional marker to make them transactional
i) Multiple methods in the BO and DAO operations can be performed from a service and all operations can be committed or rolled back
j) The DAO call are implemented using @Repository and JDBC Template of the SpringBoot framework

Sesson Checks and API message Logging
k) Session checks and API message logging are handled by filters in the rest layer
l)  The audit can be implementd using filter as well.
m) The validations are implemented in the service layer


DB Design:

1) obj_namespace_tbl
The table that defines a name space and code package
2) obj_type_tbl
This table defines simple and complex Types (or Classes) in a name space
3) obj_type_fields_tbl
This table defines the fields for a given type
4) validator_tbl
This defines all possible validators
5) obj_type_validators_tbl
This defines default validator for each Type in a namespace
6) obj_context_tbl
This defines a context and the object type associated with that context
The context  is a simple string that developers can define.
7) obj_context_validators_tbl
This defiens validation for an object type in a given context

Testing using curl:
1) The following command sends the json message data from a file located at path ./create-namespace.json to the URL http://localhost:8080/namespace. The curl command assumes that if data is being sent from a file, it is post method. So we need not specify method using -X POST. The application content type has to be indicated as JSON

curl  -H "Content-Type: application/json"  --data "@./create-namespace.json" http://localhost:8080/namespace

2) The following command is a sample GET to get information about a particular namespace
curl -v http://localhost:8080/namespace/JAVA

